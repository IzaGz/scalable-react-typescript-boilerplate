import * as React from 'react';
{{#if wantActionsAndReducer}}
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { {{ properCase name }}State } from './reducer';
import {
  loadDataInitiation,
  loadDataSuccess,
  loadDataFailure,
} from './actions';
{{/if}}
{{#if wantSelectors}}
import {
  selectIsLoading,
  selectError,
  selectData,
} from './selectors';
{{/if}}
import { Heading, Section } from './styles';

{{#unless wantActionsAndReducer}}
interface {{ properCase name }}PropTypes extends React.Props<any> {

};

{{/unless}}
{{#if wantActionsAndReducer}}
interface {{ properCase name }}Props extends React.Props<any> {
  isLoading: boolean;
  error?: { message: string };
  data?: any;
};

interface {{ properCase name }}DispatchProps {
  actions: {
    loadDataInitiation: Function;
    loadDataSuccess: Function;
    loadDataFailure: Function;
  };
};

type {{ properCase name }}PropTypes = {{ properCase name }}Props & {{ properCase name }}DispatchProps;

{{#if wantSelectors}}
const mapStateToProps = (state: {{ properCase name }}State): {{ properCase name }}Props => ({
  isLoading: selectIsLoading(state),
  error: selectError(state),
  data: selectData(state),
});
{{else}}
const mapStateToProps = (state) => ({
  isLoading: state.{{ camelCase name }}.isLoading,
  error: state.{{ camelCase name }}.error,
  data: state.{{ camelCase name }}.data,
});
{{/if}}

const mapDispatchToProps = (dispatch): {{ properCase name }}DispatchProps => ({
  actions: bindActionCreators(
    {
      loadDataInitiation,
      loadDataSuccess,
      loadDataFailure,
    },
    dispatch,
  ),
});

{{/if}}
{{#if wantActionsAndReducer}}
class {{ properCase name }} extends React.Component<{{ properCase name }}PropTypes, {{ properCase name }}State> {
{{else}}
class {{ properCase name }} extends React.Component<{{ properCase name }}PropTypes, any> {
{{/if}}
  public render() {
    return (
      <Section>
        <Heading>
          Best container ever!
        </Heading>
      </Section>
    );
  }
}

{{#if wantActionsAndReducer}}
export default connect(
  mapStateToProps,
  mapDispatchToProps,
)({{ properCase name }});
{{else}}
export default {{ properCase name }};
{{/if}}
